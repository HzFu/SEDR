args = commandArgs(trailingOnly=TRUE)
sample.name <- args[1]
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
options(bitmapType = 'cairo')
dir.input <- file.path('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/sp_data/', sample.name)
dir.output <- file.path('../output/', sample.name, '/SpatialGSC_result/Seurat/')
if(!dir.exists(file.path(dir.output))){
dir.create(file.path(dir.output), recursive = TRUE)
}
### load data
sp_data <- Load10X_Spatial(file.path(dir.input, 'raw'), filename = "filtered_feature_bc_matrix.h5")
### load data
sp_data <- Load10X_Spatial('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/sp_data/', filename = "filtered_feature_bc_matrix.h5")
dir.output <- file.path('../SpatialGSC_result/Seurat/')
if(!dir.exists(file.path(dir.output))){
dir.create(file.path(dir.output), recursive = TRUE)
}
### Data processing
plot1 <- VlnPlot(sp_data, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(sp_data, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
ggsave(paste(dir.output, './Seurat.QC.png', sep=""), width = 10, height=5)
args = commandArgs(trailingOnly=TRUE)
sample.name <- args[1]
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
options(bitmapType = 'cairo')
dir.output <- file.path('../SpatialGSC_result/Seurat/')
if(!dir.exists(file.path(dir.output))){
dir.create(file.path(dir.output), recursive = TRUE)
}
### load data
sp_data <- Load10X_Spatial('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/sp_data/', filename = "filtered_feature_bc_matrix.h5")
### Data processing
plot1 <- VlnPlot(sp_data, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(sp_data, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
ggsave(paste(dir.output, './Seurat.QC.png', sep=""), width = 10, height=5)
# sctransform
sp_data <- SCTransform(sp_data, assay = "Spatial", verbose = FALSE)
### Dimensionality reduction, clustering, and visualization
sp_data <- RunPCA(sp_data, assay = "SCT", verbose = FALSE)
sp_data <- FindNeighbors(sp_data, reduction = "pca", dims = 1:30)
sp_data <- FindClusters(sp_data, verbose = FALSE)
sp_data <- RunUMAP(sp_data, reduction = "pca", dims = 1:30)
p1 <- DimPlot(sp_data, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(sp_data, label = TRUE, label.size = 3)
p1 + p2
ggsave(paste(dir.output, './Seurat.cell_cluster.png', sep=""), width=10, height=5)
write.table(sp_data@meta.data, file=file.path(dir.output, 'metadata.tsv'), sep='\t', quote=FALSE)
saveRDS(sp_data, file=file.path(dir.output, 'Seurat_final.rds'))
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
options(bitmapType = 'cairo')
dir.output <- file.path('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/Seurat')
dir.GSCoutput <- file.path('../SpatialGSC_result')
sp_data <- readRDS(file.path(dir.output, 'Seurat_final.rds'))
result <- read.table(file.path(dir.GSCoutput,  '/clustering_result.tsv'), sep='\t', header=TRUE)
result$GSC_labels <- as.character(result$GSC_labels)
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
dir.GSCoutput <- file.path('/Users/hzfu/Dropbox/Proj_code/SpatialGSC_code')
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
dir.GSCoutput <- file.path('../SpatialGSC_result')
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
dir.GSCoutput <- file.path('/Users/hzfu/Dropbox/Proj_code/SpatialGSC_code/SpatialGSC_result')
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
result$GSC_labels <- as.character(result$GSC_labels)
result$GSC_labels <- as.character(result$GSC_labels)
result$Seurat_labels <- sp_data@meta.data$seurat_clusters
sp_data@meta.data$GSC <- result$GSC_labels
p1 <- SpatialDimPlot(sp_data, label = TRUE, label.size = 3) + ggtitle('Seurat')
p2 <- SpatialDimPlot(sp_data, label = TRUE, group.by = 'GSC', label.size=3) + ggtitle('SpatialGSC')
p1 + p2
ggsave(file.path(dir.GSCoutput, '/comparison.spatial.png'), width=12, height=6)
p1 <- DimPlot(sp_data, reduction = "umap", label = TRUE) + ggtitle('Seurat')
p2 <- ggplot(data=result, aes(umap1, umap2, color=GSC_labels)) + geom_point(size=1) + ggtitle('GSC') + theme_bw()
p3 <- DimPlot(sp_data, reduction = 'umap', group.by = 'GSC', label=TRUE) + ggtitle('Seurat_with_GSC_labels')
p4 <- ggplot(data=result, aes(umap1, umap2, color=Seurat_labels)) + geom_point(size=1) + ggtitle('GSC_with_Seuratlabels') + theme_bw()
(p1 + p2)/(p3+p4)
ggsave(file.path(dir.GSCoutput, '/comparison.umap.png'), width=16, height=12)
sp_data@meta.data$GSC <- result$GSC_labels
args = commandArgs(trailingOnly=TRUE)
sample.name <- args[1]
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
options(bitmapType = 'cairo')
dir.output <- file.path('../SpatialGSC_result/Seurat/')
if(!dir.exists(file.path(dir.output))){
dir.create(file.path(dir.output), recursive = TRUE)
}
### load data
sp_data <- Load10X_Spatial('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/sp_data/', filename = "filtered_feature_bc_matrix.h5")
dir.output <- file.path('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/Seurat')
dir.GSCoutput <- file.path('/Users/hzfu/Dropbox/Proj_code/SpatialGSC_code/SpatialGSC_result')
sp_data <- readRDS(file.path(dir.output, 'Seurat_final.rds'))
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
args = commandArgs(trailingOnly=TRUE)
sample.name <- args[1]
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
options(bitmapType = 'cairo')
dir.output <- file.path('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/')
if(!dir.exists(file.path(dir.output))){
dir.create(file.path(dir.output), recursive = TRUE)
}
### load data
sp_data <- Load10X_Spatial('/Users/hzfu/Documents/Project_code/DeepMSC_data/data/data_210411/spatial_gnn/spatial_data.Brain_s2/sp_data/', filename = "filtered_feature_bc_matrix.h5")
### Data processing
plot1 <- VlnPlot(sp_data, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(sp_data, features = "nCount_Spatial") + theme(legend.position = "right")
wrap_plots(plot1, plot2)
ggsave(paste(dir.output, './Seurat.QC.png', sep=""), width = 10, height=5)
# sctransform
sp_data <- SCTransform(sp_data, assay = "Spatial", verbose = FALSE)
write.table(sp_data@assays$SCT@scale.data, file.path(dir.output, './rna.scaled_data.tsv'), sep='\t', quote=FALSE)
write.table(sp_data@images$slice1@coordinates, file.path(dir.output, './spatial.coordinates.tsv'), sep='\t', quote=FALSE)
### Dimensionality reduction, clustering, and visualization
sp_data <- RunPCA(sp_data, assay = "SCT", verbose = FALSE)
sp_data <- FindNeighbors(sp_data, reduction = "pca", dims = 1:30)
sp_data <- FindClusters(sp_data, verbose = FALSE)
sp_data <- RunUMAP(sp_data, reduction = "pca", dims = 1:30)
p1 <- DimPlot(sp_data, reduction = "umap", label = TRUE)
p2 <- SpatialDimPlot(sp_data, label = TRUE, label.size = 3)
p1 + p2
ggsave(paste(dir.output, './Seurat.cell_cluster.png', sep=""), width=10, height=5)
write.table(sp_data@meta.data, file=file.path(dir.output, 'metadata.tsv'), sep='\t', quote=FALSE)
saveRDS(sp_data, file=file.path(dir.output, 'Seurat_final.rds'))
setwd("~/Dropbox/Proj_code/SEDR_code/R_code")
setwd("~/Dropbox/Proj_code/SED_code/R_code")
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(colormap)
library(mclust)
library(ggmap)
options(bitmapType = 'cairo')
prj_name <- '151507'
dir.output <- file.path('/Users/hzfu/Documents/Project_code/DeepMSC_data/spatial_data/DLPFC/', prj_name)
dir.GSCoutput <- file.path('../tmp_result/DLPFC/', prj_name)
sp_data <- readRDS(file.path(dir.output, 'Seurat_final.rds'))
result <- read.table(file.path(dir.GSCoutput,  'clustering_result.tsv'), sep='\t', header=TRUE)
sp_data@meta.data$sed_labels <- as.character(result$sed_labels)
sp_data@meta.data$deep_labels <- as.character(result$deep_labels)
sp_data@meta.data$layer_guess <- as.character(result$layer_guess)
sp_data@meta.data$gnn_labels <- as.character(result$gnn_labels)
p2 <- SpatialPlot(sp_data, features = 'nFeature_Spatial', label.box = FALSE, alpha = c(0, 0))
p3 <- SpatialDimPlot(sp_data, label = TRUE, cols = colormap(colormaps$jet,nshades=length(table(sp_data@meta.data$seurat_clusters))), label.size = 2) + ggtitle('Seurat')
p4 <- SpatialDimPlot(sp_data, label = TRUE, cols = colormap(colormaps$jet,nshades=length(table(sp_data@meta.data$sed_labels))), group.by = 'sed_labels', label.size=2) + ggtitle('SED')
p5 <- SpatialDimPlot(sp_data, label = TRUE, cols = colormap(colormaps$jet,nshades=length(table(sp_data@meta.data$layer_guess))), group.by = 'layer_guess', label.size=2) + ggtitle('layer_guess')
p6 <- SpatialDimPlot(sp_data, label = TRUE, cols = colormap(colormaps$jet,nshades=length(table(sp_data@meta.data$deep_labels))), group.by = 'deep_labels', label.size=2) + ggtitle('DNN')
p7 <- SpatialDimPlot(sp_data, label = TRUE, cols = colormap(colormaps$jet,nshades=length(table(sp_data@meta.data$gnn_labels))), group.by = 'gnn_labels', label.size=2) + ggtitle('GNN')
(p3+p4)/(p5+p2)
ggsave(file.path(dir.GSCoutput, '/comparison.spatial.jpg'), width=6, height=6)
adjustedRandIndex(sp_data@meta.data$layer_guess, sp_data@meta.data$sed_labels)
